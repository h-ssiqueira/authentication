openapi: 3.0.3
info:
  title: Authentication
  version: v1
servers:
  - url: https://localhost:8080
    description: Development server
paths:
  /api/v1/auth/login:
    post:
      tags:
        - Auth
      summary: "Login"
      security: []
      operationId: login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        200:
          description: "Authenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationToken"
        400:
          description: "Missing parameter"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: "Unauthorized"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "Internal Server Error"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/auth/logout:
    delete:
      tags:
        - Auth
      summary: "Logout"
      operationId: logout
      responses:
        200:
          description: "Successful Logout"
        500:
          description: "Internal Server Error"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/users:
    post:
      tags:
        - User
      summary: "User creation"
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationRequest"
      responses:
        201:
          description: "Created"
        400:
          description: "Missing parameter"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: "Unauthorized"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "Internal Server Error"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - User
      summary: "User search"
      operationId: fetchUsers
      parameters:
        - $ref: "#/components/parameters/UserSearchQuery"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Size"
      responses:
        200:
          description: "Users found"
          headers:
            X-Has-Next:
              description: Indicates if has a next page with content
              schema:
                type: integer
            X-Total-Size:
              description: Indicates the total size of contents of actual page
              schema:
                type: integer
            X-Total-Elements:
              description: Indicates the total number of elements found with the parameters provided in the request
              schema:
                type: integer
            X-Total-Pages:
              description: Indicates the total number of pages found with the parameters provided in the request
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTOList"
        204:
          description: "No content found"
        401:
          description: "Unauthorized"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "Internal Server Error"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/users/{userId}:
    get:
      tags:
        - User
      summary: "User search"
      operationId: fetchUser
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        200:
          description: "Users found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        204:
          description: "User not found"
        401:
          description: "Unauthorized"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "Internal Server Error"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    UserId:
      name: userId
      in: path
      schema:
        type: integer
        format: int64
      required: true
    UserSearchQuery:
      name: q
      in: query
      schema:
        type: string
      required: false
    Page:
      name: page
      in: query
      schema:
        type: integer
      required: false
    Size:
      name: size
      in: query
      schema:
        type: integer
      required: false
  schemas:
    Error:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        message:
          type: string
    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    UserCreationRequest:
      type: object
      properties:
        username:
          type: string
          minimum: 3
          maximum: 20
          example: 'username'
        email:
          type: string
          pattern: '^(?:[a-z0-9!#$%&''*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&''*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$'
          example: 'email@email.com'
        password:
          type: string
          pattern: '^(?=[^\n]*[A-Z])(?=[^\n]*[a-z])(?=[^\n]*\d)(?=[^\n]*\W)[^\n]{12,}$'
          example: 'StrongPassword'
      required:
        - username
        - password
        - email
    AuthenticationToken:
      type: object
      properties:
        token:
          type: string
          example: 'authentication token'
    UserResponseDTOList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserResponseDTO"
    UserResponseDTO:
      type: object
      properties:
        id:
          type: string
          example: "1"
        username:
          type: string
          example: 'username'
        email:
          type: string
          example: 'email@email.com'